<nav aria-label="Paginacao">
    <ul class="pagination justify-content-center">
        @foreach (var link in links)
        {
            <li @onclick="@(()=> PaginaSelecionadaLink(link))"
            style="cursor:pointer;"
            class="page-item @(link.Enable ? null:"disabled") @(link.Active ? "active":null)">
                <span class="page-link" href="#">@link.Texto</span>
            </li>
        }       
    </ul>
</nav>

@code {
    [Parameter] public int PaginaAtual { get; set; } = 1;
    [Parameter] public int QuantidadeTotalPaginas { get; set; }
    [Parameter] public int Raio { get; set; } = 3;
    [Parameter] public EventCallback<int> PaginaSelecionada { get; set; }

    List<LinkModel> links;

    class LinkModel
    {
        public string Texto { get; set; }
        public int Page { get; set; }
        public bool Enable { get; set; } = true;
        public bool Active { get; set; } = false;

        public LinkModel(int page, bool enabled, string texto)
        {
            Page = page;
            Enable = enabled;
            Texto = texto;
        }

        public LinkModel(int page, bool enabled) : this(page, enabled, page.ToString()) { }

        public LinkModel(int page) : this(page, true) { }
    }

    private async Task PaginaSelecionadaLink(LinkModel link)
    {
        if (link.Page == PaginaAtual)
        {
            return;
        }

        if (!link.Enable)
        {
            return;
        }

        PaginaAtual = link.Page;
        await PaginaSelecionada.InvokeAsync(link.Page);
    }

    protected override void OnParametersSet()
    {
        CarregarPaginas();
    }

    private void CarregarPaginas()
    {
        links = new List<LinkModel>();

        //tratar o link da pagina anterior
        var isLinkPaginaAnteriorHabilitado = PaginaAtual != 1;
        var paginaAnterior = PaginaAtual - 1;

        links.Add(new LinkModel(paginaAnterior, isLinkPaginaAnteriorHabilitado, "Anterior"));

        //tratar os links das paginas especificas
        for (int i = 1; i <= QuantidadeTotalPaginas; i++)
        {
            if (i >= paginaAnterior - Raio && i <= paginaAnterior + Raio)
            {
                links.Add(new LinkModel(i) { Active = PaginaAtual == i });
            }
        }

        //trata o link para a proxima pagina
        var isLinkProximaPaginaHabilitado = PaginaAtual != QuantidadeTotalPaginas;
        var proximaPagina = PaginaAtual + 1;

        links.Add(new LinkModel(proximaPagina, isLinkProximaPaginaHabilitado, "Próximo"));
    }
}
