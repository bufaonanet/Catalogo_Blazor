@inject IJSRuntime js
@inject HttpClient http

<EditForm Model="@Produto" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label form="nome">Nome:</label>
        <div>
            <InputText id="txtCategoriaNome" @bind-Value="@Produto.Nome" class="form-control" />
            <ValidationMessage For="@(()=> Produto.Nome)" />
        </div>
    </div>
    <div class="form-group">
        <label form="nome">Descrição: </label>
        <div>
            <InputTextArea @bind-Value="@Produto.Descricao" class="form-control" />
            <ValidationMessage For="@(()=> Produto.Descricao)" />
        </div>
    </div>
    <div class="form-group">
        <label form="nome">Preco: </label>
        <div>
            <InputNumber @bind-Value="@Produto.Preco" class="form-control" />
            <ValidationMessage For="@(()=> Produto.Preco)" />
        </div>
    </div>
    <div class="form-group">
        <label form="nome">Categoria: </label>
        <select @onchange="CategoriaSelectionChanged" class="form-control">
            @if (Categorias != null)
            {
                @foreach (var categoria in Categorias)
                {
                    <option value="@categoria.CategoriaId"
                    selected="@(categoria.CategoriaId == Produto.CategoriaId ? true : false)">
                        @categoria.Nome
                    </option>
                }
            }
        </select>
    </div>
    <div class="form-group row">
        <InputFile OnChange="CarregaImagem"></InputFile>
    </div>
    <div class="col-2">
        <ImagemFoto ImagemRemota="@Produto.ImagemUrl" />
    </div>
    <br />
    <button type="submit" class="btn btn-success">
        @ButtonTextSubmit
    </button>
    <button class="btn btn-danger" @onclick="@(()=> navigation.NavigateTo("produto"))">
        @ButtonTextCancel
    </button>

</EditForm>

@code {
    List<Categoria> Categorias;

    [Inject]
    public NavigationManager navigation { get; set; }

    [Parameter]
    public Produto Produto { get; set; }

    [Parameter]
    public string ButtonTextSubmit { get; set; } = "Salvar";

    [Parameter]
    public string ButtonTextCancel { get; set; } = "Cancelar";

    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    public string ImagemRemota { get; set; }

    long maxFileSize = 1024 * 1024 * 15;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Focus("txtCategoriaNome");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Produto.ImagemUrl = null;
        await CarregaCategorias();
        if (Produto.CategoriaId == 0)
        {
            Produto.CategoriaId = Categorias[0].CategoriaId;
        }
    }

    private async Task CarregaCategorias()
    {
        Categorias = await http.GetFromJsonAsync<List<Categoria>>("api/categoria/todas");
    }

    private async Task Focus(string elementId)
    {
        await js.InvokeVoidAsync("focusById", elementId);
    }

    void CategoriaSelectionChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int id))
        {
            Produto.CategoriaId = id;
        }
    }

    async Task CarregaImagem(InputFileChangeEventArgs e)
    {
        var format = "image/jpeg";
        var imageFile = await e.File.RequestImageFileAsync(format, 640, 480);

        using var fileStream = imageFile.OpenReadStream(maxFileSize);
        using var memoryStream = new MemoryStream();
        await fileStream.CopyToAsync(memoryStream);

        ImagemRemota = $"data:{format};base64,{Convert.ToBase64String(memoryStream.ToArray())}";

        if (ImagemRemota != null)
        {
            Produto.ImagemUrl = ImagemRemota;
            ImagemRemota = null;
        }
    }
}

