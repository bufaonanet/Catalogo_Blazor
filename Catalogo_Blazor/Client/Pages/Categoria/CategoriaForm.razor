@inject IJSRuntime js

<EditForm Model="@Categoria" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label form="nome">Nome</label>
        <div>
            <InputText id="txtCategoriaNome" @bind-Value="@Categoria.Nome" class="form-control" />
            <ValidationMessage For="@(()=> Categoria.Nome)" />
        </div>
    </div>
    <div class="form-group">
        <label form="nome">Descrição</label>
        <div>
            <InputText @bind-Value="@Categoria.Descricao" class="form-control" />
            <ValidationMessage For="@(()=> Categoria.Descricao)" />
        </div>
    </div>
    <br />
    <button type="submit" class="btn btn-success">@ButtonTextSubmit</button>
    <button class="btn btn-danger" @onclick="@(()=> navigation.NavigateTo("categoria"))">@ButtonTextCancel</button>

</EditForm>

@code {
    [Inject]
    public NavigationManager navigation { get; set; }

    [Parameter]
    public Categoria Categoria { get; set; }

    [Parameter]
    public string ButtonTextSubmit { get; set; } = "Salvar";

    [Parameter]
    public string ButtonTextCancel { get; set; } = "Cancelar";

    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Focus("txtCategoriaNome");
        }        
    }

    private async Task Focus(string elementId)
    {
        await js.InvokeVoidAsync("focusById", elementId);
    }
}

